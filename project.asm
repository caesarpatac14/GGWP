TITLE PROJECT_131 (GGWP)
.MODEL MEDIUM

;--------------------------------------

.DATA
	GAME_TITLE DB 'title.txt', 00H
	HELP_FILE DB 'help.txt', 00H
	GAME_SCREEN_FILE DB 'screen.txt', 00H
	DICTIONARY DB 'words.txt', 00H

	TITLE_FULL DB 'G u e s s i n g  G a m e  W i t h  P i c t u r e$'
	START_GAME DB 'START$'
	HELP_GAME DB 'HELP$'
	QUIT_GAME DB 'QUIT$'
	BACK_MAIN DB 'BACK$'
	CREDIT_VIEW DB 'CREDITS$'
	ARROW DB '>>>$'
	REV_ARROW DB '<<<$'
	PHASE_ARROW DB 'V$'
	CREATOR DB 'By: jcpatac$'
	
	TITLE_HEADING DB 501 DUP ('$')
	TITLE_POS DW 0300H
	TITLE_POS2 DW 0B10H
	TITLE_LEN DW 500
	HELP_TXT DB 901 DUP ('$')
	HELP_LEN DW 900
	GAME_SCR DB 1111 DUP ('$')
	GAME_SCR_LEN DW 1110
	TEXT DB 100 DUP ('$')
	CHAR DB ?
	WORD_POS DW ?
	LEN DB 0

	START_POS DW 0F26H
	HELP_POS DW 1126H
	QUIT_POS DW 1326H
	ARROW_POS DW 0F21H
	HIDE_CURSOR DW 2052H
	HIDE DB ' $'

	KEY_INPUT DB 0
	SELECTION DB 0
	SCREEN_STATUS DB 0

	FILEHANDLE DW ?

;--------------------------------------

.CODE

DISPLAY MACRO ARGS
	MOV AH, 09H
	LEA DX, ARGS
	INT 21H
ENDM

;--------------------------------------

CURSOR_SET MACRO POS, MSG
	MOV DX, POS
	PUSH DX
	CALL SET_CURSOR
	DISPLAY MSG
ENDM

;--------------------------------------

CLEAR_SCREEN MACRO UL, LR
	MOV AX, 0600H
	MOV BH, 02H
	;MOV BH, E2H
	MOV CX, UL
	MOV DX, LR
	INT 10H
ENDM

;--------------------------------------

OPEN_FILE MACRO FILE_NAME
	MOV AH, 3DH
	MOV AL, 00
	LEA DX, FILE_NAME
	INT 21H
	MOV FILEHANDLE, AX
ENDM

READ_FILE MACRO FILE, DEST, LEN
	OPEN_FILE FILE

	MOV AH, 3FH
	MOV BX, FILEHANDLE
	MOV CX, LEN
	LEA DX, DEST
	INT 21H

	MOV AH, 3EH
	MOV BX, FILEHANDLE
	INT 21H
ENDM

;--------------------------------------

RANDOMIZE MACRO LOWERBOUND, UPPERBOUND, CONTAINER
	MOV AH, 00H ;interrupt to get system time 
	INT 1AH

	MOV AX, DX ;set seed (declared as global var) to dl

	XOR DX, DX ;clear dx
	XOR CH, CH ;clear ch
	MOV CX, UPPERBOUND ;set cl to upperbound parameter initially
	SUB CX, LOWERBOUND ;subtract cl to get the range of possible values
	DIV CX ;finally, divide ax with cx

	MOV AX, DX ;dl contains the remainder of the division
	ADD AX, LOWERBOUND ;add the lowerbound to al to include it in the chances of selection
	MOV CONTAINER, AX ;store to the container the randomized number
ENDM

;--------------------------------------

MAIN PROC FAR
	MOV AX, @data
	MOV DS, AX

	CALL MAIN_MENU

	;MOV AH, 4CH
	;INT 21H

MAIN ENDP

;--------------------------------------

MAIN_MENU PROC NEAR
	MOV SCREEN_STATUS, 0
	CLEAR_SCREEN 0000H, 184FH

	READ_FILE GAME_TITLE, TITLE_HEADING, TITLE_LEN
	CURSOR_SET TITLE_POS, TITLE_HEADING
	CURSOR_SET TITLE_POS2, TITLE_FULL

	CURSOR_SET ARROW_POS, ARROW
	CURSOR_SET START_POS, START_GAME
	CURSOR_SET HELP_POS, HELP_GAME
	CURSOR_SET QUIT_POS, QUIT_GAME

	CURSOR_SET 1843H, CREATOR

	LOOP_MAIN:
		CALL GET_KEY
		CALL CHECK_KEY
		CURSOR_SET HIDE_CURSOR, HIDE
		JMP LOOP_MAIN

MAIN_MENU ENDP

;--------------------------------------

GET_KEY PROC NEAR
	MOV AH, 01H
	INT 16H

	JZ IGNORE_THIS

	MOV AH, 00H
	INT 16H

	MOV KEY_INPUT, AH

	IGNORE_THIS:
		RET
GET_KEY ENDP

;--------------------------------------
IN_HELP PROC NEAR
	CMP KEY_INPUT, 4BH ; CHECK IF KEY IS LEFT ARROW
	JE GO_LEFT

	CMP KEY_INPUT, 4DH ; CHECK IF KEY IS RIGHT ARROW
	JE GO_RIGHT

	CMP KEY_INPUT, 1CH ; CHECK IF KEY IS RETURN (ENTER)
	JE HELP_OPT

	JMP STOP

	GO_LEFT:
		MOV AL, SCREEN_STATUS
		CMP AL, 1 ; CHECK IF SCREEN_STATUS IS VIEW_HELP (1)
		JL STOP
		CLEAR_SCREEN 0141H, 0144H ; CKEAR WHOLE SCREEN
		MOV SELECTION, 3 ; SET THE CURRENT SELECTION TO BACK TO MAIN (3)
		CURSOR_SET 0108H, REV_ARROW ; SET THE ARROW INDICATOR TO THE LEFT
		MOV KEY_INPUT, 0 ; RESET TO DEFAULT (NULL)
		JMP STOP

	GO_RIGHT:
		MOV AL, SCREEN_STATUS
		CMP AL, 1 ; CHECK IF SCREEN STATUS IS IN VIEW HELP (1)
		JL STOP
		CLEAR_SCREEN 0108H, 010BH ; CLEAR A PART OF SCREEN FOR ARROW INDICATOR
		MOV SELECTION, 4 ; SET THE CURRENT SELECTION TO VIEW CREDIT (4)
		CURSOR_SET 0141H, ARROW ; PLACE THE INDICATOR TO THE RIGHT PART
		MOV KEY_INPUT, 0
		JMP STOP

	TO_MAIN:
		MOV KEY_INPUT, 0 ; RESET KEY (NULL)
		MOV SELECTION, 0 ; RESET SELECTION
		CALL RESET
		JMP MAIN_MENU

	HELP_OPT:
		MOV AL, SELECTION
		CMP AL, 3 ; CHECK IF CURRENT SELECTION IS BACK TO MAIN (3)
		JE TO_MAIN

	STOP:
		RET
IN_HELP ENDP

;--------------------------------------

CHECK_KEY PROC NEAR
	CALL IN_HELP

	CMP KEY_INPUT, 48H ; CHECK IF KEY IS ARROW UP
	JE GO_UP

	CMP KEY_INPUT, 50H ; CHECK IF KEY IS ARROW DOWN
	JE GO_DOWN

	CMP KEY_INPUT, 1CH ; CHECK IF PRESSED KEY IS RETURN (ENTER)
	JE SELECT_OPT

	JMP RETURN

	GO_UP:
		MOV AL, SELECTION
		CMP AL, 0 ; CHECK IF CURRENT SELECTION IS IN PLAY GAME (0)
		JE RETURN
		MOV AL, SCREEN_STATUS
		CMP AL, 0 ; CHECK IF SCREEN STATUS IS IN MAIN MENU (0)
		JG RETURN
		CLEAR_SCREEN 0F21H, 1324H ; CLEAR SPECIFIC AREA IN SCREEN FOR INDICATOR POSITIONING
		SUB ARROW_POS, 0200H ; USEFUL FOR INDICATOR MOVEMENTS
		DEC SELECTION
		CURSOR_SET ARROW_POS, ARROW
		MOV KEY_INPUT, 0 ; SET THE INPUT KEY TO NULL (0)

	RETURN:
		RET

	GO_DOWN:
		MOV AL, SELECTION
		CMP AL, 2
		JE RETURN
		MOV AL, SCREEN_STATUS
		CMP AL, 0
		JG RETURN
		CLEAR_SCREEN 0F21H, 1324H ; CLEAR SPECIFIC AREA IN SCREEN FOR INDICATOR POSITIONING
		ADD ARROW_POS, 0200H ; USEFUL FOR INDICATOR MOVEMENTS
		INC SELECTION
		CURSOR_SET ARROW_POS, ARROW
		MOV KEY_INPUT, 0 ; SET THE INPUT KEY TO NULL (0)
		JMP RETURN

	CALL_RETURN:
		JMP RETURN

	SELECT_OPT:
		MOV AL, SELECTION
		CMP AL, 2 ; COMPARE IF SELECTION IS QUIT (2)
		JE CALL_EXIT
		CMP AL, 1 ; COMPARE IF SELECTION IS VIEW HELP (1)
		JE VIEW_HELP
		CALL GAME_LOOP

	CALL_EXIT:
		JMP EXIT_PROG

	VIEW_HELP:
		MOV SCREEN_STATUS, 1 ; STATUS FOR VIEW HELP
		MOV SELECTION, 3 ; SELECTION IS SET TO BACK TO MAIN (3)
		CLEAR_SCREEN 0000H, 184FH ; CLEAR WHOLE SCREEN
		READ_FILE HELP_FILE, HELP_TXT, HELP_LEN
		CURSOR_SET 0000H, HELP_TXT
		CURSOR_SET 0103H, BACK_MAIN ; POSITION OF BACK TO MAIN HUD
		CURSOR_SET 0145H, CREDIT_VIEW ; POSITION OF VIEW CREDIT HUD
		CURSOR_SET 0108H, REV_ARROW ; DEFAULT POSTION OF STATE INDICATOR
		MOV KEY_INPUT, 0
		JMP CALL_RETURN

	EXIT_PROG:
		CALL EXIT
CHECK_KEY ENDP

;--------------------------------------

RESET PROC NEAR
	MOV ARROW_POS, 0F21H

	RET
RESET ENDP

;--------------------------------------

GAME_PHASE PROC NEAR
	

	RET
GAME_PHASE ENDP

;--------------------------------------

GAME_LOOP PROC NEAR
	MOV SCREEN_STATUS, 2 ; SET SCREEN STATUS TO PLAYING (2)
	CLEAR_SCREEN 0000H, 184FH ;CLEAR FULLSCREEN
	READ_FILE GAME_SCREEN_FILE, GAME_SCR, GAME_SCR_LEN
	CURSOR_SET 0000H, GAME_SCR ;SET THE CURSOR TO TOP-LEFT (0:0)
	CURSOR_SET HIDE_CURSOR, HIDE

	CALL GET_WORD
	CURSOR_SET 140CH, TEXT ; SET THE TEXT TO ROW: 20 ; COL: 12
	CURSOR_SET 160CH, HIDE ; SET THE CURSOR TO ROW: 22 ; COL: 12
	
	G_LOOP:
		CALL GET_KEY
		JMP G_LOOP

	RET
GAME_LOOP ENDP

;--------------------------------------

GET_WORD PROC NEAR
	RAND_WORD:
		RANDOMIZE 1, 58109, WORD_POS ; GENERATE A RANDOM NUMBER FROM 1-58109 (NUMBER OF WORDS IN DICTIONARY)
		CALL READ_DICTIONARY
		LEA SI, TEXT
		CALL GET_LEN
		MOV AL, LEN
		CMP AL, 6 ; COMPARE TO MINIMUM NUMBER OF LETTERS
		JL RAND_WORD

	RET
GET_WORD ENDP

;--------------------------------------

READ_DICTIONARY PROC NEAR ; FILE READING LINE BY LINE (THROUGH EVERY CHAR)
	OPEN_FILE DICTIONARY
	LEA SI, TEXT
	READ_LINE:
		MOV AH, 3FH ; READ FILE
		MOV BX, FILEHANDLE
		LEA DX, CHAR
		MOV CX, 1
		INT 21H

		CMP WORD_POS, 0 ; CHECK IF COUNTER IS 0
		JE EO_FILE

		CMP AX, 0 ; CHECK IF EOF
		JE EO_FILE

		MOV AL, CHAR

		CMP AL, 0AH ; CHECK IF NEWLINE
		JE LINE_FEED

		MOV [SI], AL
		INC SI

		JMP READ_LINE

	LINE_FEED:
		DEC WORD_POS ; DECREMENT COUNTER
		LEA DX, TEXT
		MOV AL, '$'
		MOV [SI], AL ; ADD A DELIMETER TO THE END OF THE WORD
		MOV SI, DX ; START FROM THE BEGINNING OF BUFFER
		JMP READ_LINE

	EO_FILE:
		RET
READ_DICTIONARY ENDP

;--------------------------------------

GET_LEN PROC NEAR
	MOV LEN, 0
	STR_LOOP:
		MOV AL, [SI]
		CMP AL, '$' ; COMPARE IF CURRENT CHAR IS END OF THE WORD
		JE STOP_LOOP

		INC SI
		INC LEN
		JMP STR_LOOP

	STOP_LOOP:
		SUB LEN, 1 ; SUBTRACT 1 FOR THE DELIMETER
		RET
GET_LEN ENDP

;--------------------------------------

SET_CURSOR PROC NEAR
	POP BX
	POP DX
	PUSH BX
	MOV AH, 02H
	MOV BH, 00
	INT 10H

	RET
SET_CURSOR ENDP

;--------------------------------------

EXIT PROC NEAR
	CLEAR_SCREEN 0000H, 1847H ; CLEAR WHOLE SCREEN
	CURSOR_SET 0000H, HIDE ; SET THE POSITION OF CURSOR
	MOV AH, 4CH ; EXIT
	INT 21H
EXIT ENDP

;--------------------------------------

END MAIN